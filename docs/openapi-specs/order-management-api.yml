openapi: 3.0.3
info:
  title: üõí Order Management Service API
  version: 1.0.0
  description: |
    # Order Management Service API
    
    Complete order lifecycle management with shopping cart and payment processing.
    
    ## Features
    - üõçÔ∏è **Shopping Cart:** Add, remove, view, clear cart items
    - üìã **Order Processing:** Create orders, payment confirmation, order history
    - üîÑ **Order Lifecycle:** Complete order workflow from cart to delivery
    - üõ°Ô∏è **Security:** JWT-based authentication with role-based access control
    
    ## Authentication
    All endpoints require authentication using a Bearer JWT token:
    1. Login via User Management Service to get your JWT token
    2. Include the token in the Authorization header: `Bearer <your-jwt-token>`
    
    ## Typical Workflow
    1. Add items to cart via `POST /cart/{userId}/add`
    2. Review cart via `GET /cart/{userId}`
    3. Create order from cart via `POST /orders/from-cart/{userId}`
    4. Confirm payment via `POST /orders/{orderId}/confirm-payment`
    5. Track order status via `GET /orders/{orderId}/status`
  contact:
    name: Bookstore Development Team
    email: support@bookstore.com
    url: https://bookstore.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

servers:
  - url: http://localhost:8080
    description: Local Development Server
  - url: https://api.bookstore.com/order-service
    description: Production Server

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Enter JWT Bearer token in the format Bearer <token>

  schemas:
    CartItemRequest:
      type: object
      required:
        - bookId
        - quantity
      properties:
        bookId:
          type: integer
          format: int64
          example: 1
          description: "ID of the book to add to cart"
        quantity:
          type: integer
          example: 2
          description: "Quantity of books to add"

    CartItemResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        bookId:
          type: integer
          format: int64
          example: 1
        bookTitle:
          type: string
          example: "The Great Gatsby"
        bookAuthor:
          type: string
          example: "F. Scott Fitzgerald"
        price:
          type: number
          format: double
          example: 12.99
        quantity:
          type: integer
          example: 2
        totalPrice:
          type: number
          format: double
          example: 25.98

    CartResponse:
      type: object
      properties:
        userId:
          type: integer
          format: int64
          example: 1
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItemResponse'
        totalItems:
          type: integer
          example: 3
        totalAmount:
          type: number
          format: double
          example: 38.97
        createdAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    OrderItemRequest:
      type: object
      required:
        - bookId
        - quantity
        - price
      properties:
        bookId:
          type: integer
          format: int64
          example: 1
        quantity:
          type: integer
          example: 2
        price:
          type: number
          format: double
          example: 12.99

    OrderRequest:
      type: object
      required:
        - userId
        - items
        - shippingAddress
      properties:
        userId:
          type: integer
          format: int64
          example: 1
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemRequest'
        shippingAddress:
          type: string
          example: "123 Main St, City, State 12345"
          description: "Shipping address for the order"

    OrderResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        userId:
          type: integer
          format: int64
          example: 1
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItemResponse'
        totalAmount:
          type: number
          format: double
          example: 38.97
        status:
          type: string
          enum: [PENDING, CONFIRMED, SHIPPED, DELIVERED, CANCELLED]
          example: "PENDING"
        shippingAddress:
          type: string
          example: "123 Main St, City, State 12345"
        orderDate:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        lastUpdated:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"

    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00.000+00:00"
        status:
          type: integer
          example: 400
        error:
          type: string
          example: "Bad Request"
        message:
          type: string
          example: "Validation failed"
        path:
          type: string
          example: "/cart/1/add"

paths:
  /cart/{userId}/add:
    post:
      tags:
        - Shopping Cart
      summary: Add item to cart
      description: Adds a book item to the user's shopping cart
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItemRequest'
      responses:
        '200':
          description: Item added to cart successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /cart/{userId}/remove:
    delete:
      tags:
        - Shopping Cart
      summary: Remove item from cart
      description: Removes a specific book item from the user's shopping cart
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - bookId
              properties:
                bookId:
                  type: integer
                  format: int64
                  example: 1
                  description: "ID of the book to remove"
      responses:
        '200':
          description: Item removed from cart successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
        '404':
          description: Item not found in cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /cart/{userId}:
    get:
      tags:
        - Shopping Cart
      summary: Get user's cart
      description: Retrieves the current contents of the user's shopping cart
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Cart contents returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartResponse'
        '404':
          description: Cart not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /cart/{userId}/clear:
    delete:
      tags:
        - Shopping Cart
      summary: Clear user's cart
      description: Removes all items from the user's shopping cart
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '204':
          description: Cart cleared successfully
        '404':
          description: Cart not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders:
    post:
      tags:
        - Order Processing
      summary: Create a new order
      description: Creates a new order for a user with specified items
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
      responses:
        '200':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders/{orderId}/status:
    get:
      tags:
        - Order Processing
      summary: Get order status
      description: Retrieves the current status of a specific order
      parameters:
        - name: orderId
          in: path
          required: true
          description: ID of the order
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Order status returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  orderId:
                    type: integer
                    format: int64
                    example: 1
                  status:
                    type: string
                    enum: [PENDING, CONFIRMED, SHIPPED, DELIVERED, CANCELLED]
                    example: "CONFIRMED"
                  lastUpdated:
                    type: string
                    format: date-time
                    example: "2024-01-15T10:30:00Z"
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders/user/{userId}:
    get:
      tags:
        - Order Processing
      summary: Get order history for a user
      description: Retrieves all orders placed by a specific user
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Order history returned
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OrderResponse'
        '404':
          description: User or orders not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders/{orderId}/confirm-payment:
    post:
      tags:
        - Order Processing
      summary: Confirm payment for an order
      description: Confirms payment for a specific order and updates its status
      parameters:
        - name: orderId
          in: path
          required: true
          description: ID of the order
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Payment confirmed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders/from-cart/{userId}:
    post:
      tags:
        - Order Processing
      summary: Create order from cart
      description: Creates an order from all items currently in the user's cart
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: Order created from cart
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderResponse'
        '404':
          description: User or cart not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Cart is empty or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

tags:
  - name: Shopping Cart
    description: Endpoints for managing shopping cart operations
  - name: Order Processing
    description: Endpoints for managing orders and order lifecycle
