version: '3.8'

# Define services
services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: bookstore_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_MULTIPLE_DATABASES: bookstore_inventory,bookstore_orders,bookstore_users
    volumes:
      - ./docker/postgres/init-multiple-dbs.sh:/docker-entrypoint-initdb.d/init-multiple-dbs.sh
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # pgAdmin - PostgreSQL Admin Interface
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: bookstore_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@bookstore.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    depends_on:
      postgres:
        condition: service_healthy

  # Apache Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: bookstore_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Apache Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: bookstore_kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka UI - Web Interface for Kafka
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: bookstore_kafka_ui
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: bookstore-kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  # User Management Service
  user-management-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        MODULE: user-management-service
        SERVICE_PORT: 8083
    container_name: user-management-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/bookstore_users
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SERVICE_PORT: 8083
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8083:8083"
    dns:
      - 8.8.8.8
      - 8.8.4.4

  # Book Inventory Service
  book-inventory-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        MODULE: book-inventory-service
        SERVICE_PORT: 8081
    container_name: book-inventory-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/bookstore_inventory
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SERVICE_PORT: 8081
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8081:8081"
    dns:
      - 8.8.8.8
      - 8.8.4.4

  # Order Management Service
  order-management-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        MODULE: order-management-service
        SERVICE_PORT: 8082
    container_name: order-management-service
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/bookstore_orders
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SERVICE_PORT: 8082
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      BOOK_INVENTORY_SERVICE_URL: http://book-inventory-service:8081
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      book-inventory-service:
        condition: service_started
    ports:
      - "8082:8082"
    dns:
      - 8.8.8.8
      - 8.8.4.4

# Define named volumes for persistent data
volumes:
  postgres_data:
    name: bookstore_postgres_data
  pgadmin_data:
    name: bookstore_pgadmin_data

# All services will be on the default network
# Docker Compose automatically creates a default network for all services
# Services can communicate using their service names as hostnames
# For example, pgAdmin can connect to PostgreSQL using 'postgres' as the hostname

